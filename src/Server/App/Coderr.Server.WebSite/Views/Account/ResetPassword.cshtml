@model Coderr.Server.WebSite.Models.Accounts.ResetPasswordViewModel

@{
    ViewBag.Title = "Reset password";
}

<div class="card">
    <div class="card-header">
        Reset password
    </div>
    <div class="card-body">
        <form asp-action="ResetPassword" method="post">
            @Html.ValidationSummary(true)
            @Html.AntiForgeryToken()
            <p>Enter your new password to complete the password reset.</p>
            <input type="hidden" asp-for="ActivationKey" />
            <div class="form-group">
                <label asp-for="Password">Password</label>
                <input class="form-control" type="password" asp-for="Password" placeholder="Enter a new password" autofocus="autofocus" required="" />
                @Html.ValidationMessageFor(model => model.Password)
                <span id="password-awesomeness"></span>
            </div>
            <div class="form-group">
                <label for="Password2">Retype password</label>
                <input class="form-control" type="password" asp-for="Password2" placeholder="Enter the same password again" required="" />
                @Html.ValidationMessageFor(model => model.Password2)
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
                <a asp-action="Login" class="btn">Cancel</a>
            </div>

        </form>

    </div>
</div>

@section scripts{
    <script type="text/javascript">
        function scorePassword(pass) {
            var score = 0;
            if (!pass)
                return score;

            // award every unique letter until 5 repetitions
            var letters = new Object();
            for (var i = 0; i < pass.length; i++) {
                letters[pass[i]] = (letters[pass[i]] || 0) + 1;
                score += 5.0 / letters[pass[i]];
            }

            // bonus points for mixing it up
            var variations = {
                digits: /\d/.test(pass),
                lower: /[a-z]/.test(pass),
                upper: /[A-Z]/.test(pass),
                nonWords: /\W/.test(pass),
            };

            var variationCount = 0;
            for (var check in variations) {
                variationCount += (variations[check] == true) ? 1 : 0;
            }
            score += (variationCount - 1) * 10;

            return parseInt(score);
        }

        function checkPassStrength(pass) {
            var score = scorePassword(pass);
            if (score > 80)
                return "You got a new highscore!";
            if (score > 50)
                return "Good enough, but you can do better..";
            if (score >= 20)
                return "Weak password";
            if (score < 20)
                return "'1234' is not a real password...";
            return "";
        }

        $(function () {
            $('#Password')
                .keypress(function () {
                    $('#password-awesomeness').html(checkPassStrength(this.value));
                });
            $('#Password')
                .keyup(function () {
                    $('#password-awesomeness').html(checkPassStrength(this.value));
                });
            $('#Passssword2')
                .focusout(function () {
                    if ($('#Password2').val() != $('#Password').val()) {
                        $('#Password2').next().html('Passwords should match.');
                    } else {
                        $('#Password2').next().html('');
                    }
                });
        });
    </script>
}